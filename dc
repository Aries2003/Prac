EXP 1: 
(i) One server to one client (Same device) 
Server.java 
import java.io.*; 
import java.net.*; 
public class Server { 
public static void main(String[] args) { 
try { 
ServerSocket serverSocket = new ServerSocket(5000); 
System.out.println("Server is waiting for client..."); 
Socket socket = serverSocket.accept(); 
System.out.println("Client connected."); 
BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream())); PrintWriter output = new PrintWriter(socket.getOutputStream(), true); 
String message = input.readLine(); 
System.out.println("Client: " + message); 
output.println("Hello from Server"); 
socket.close(); 
serverSocket.close(); 
} catch (Exception e) { 
e.printStackTrace(); 
} 
} 
}
Client.java 
import java.io.*; 
import java.net.*; 
public class Client { 
public static void main(String[] args) { 
try { 
Socket socket = new Socket("localhost", 5000); 
BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream())); PrintWriter output = new PrintWriter(socket.getOutputStream(), true); 
output.println("Hello from Client"); 
String message = input.readLine(); 
System.out.println("Server: " + message); 
socket.close(); 
} catch (Exception e) { 
e.printStackTrace(); 
} 
} 
} 
(ii) One server to one client (Different devices) 
Server.java 
import java.io.*; 
import java.net.*; 
public class Server { 
public static void main(String[] args) { 
try { 
ServerSocket serverSocket = new ServerSocket(5000);
System.out.println("Server is waiting for client..."); 
Socket socket = serverSocket.accept(); 
System.out.println("Client connected."); 
BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream())); PrintWriter output = new PrintWriter(socket.getOutputStream(), true); 
String message = input.readLine(); 
System.out.println("Client: " + message); 
output.println("Hello from Server"); 
socket.close(); 
serverSocket.close(); 
} catch (Exception e) { 
e.printStackTrace(); 
} 
} 
} 
Client.java 
import java.io.*; 
import java.net.*; 
public class Client { 
public static void main(String[] args) { 
try { 
Socket socket = new Socket("192.168.1.5", 5000); 
BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream())); PrintWriter output = new PrintWriter(socket.getOutputStream(), true); 
output.println("Hello from Client");
String message = input.readLine(); 
System.out.println("Server: " + message); 
socket.close(); 
} catch (Exception e) { 
e.printStackTrace(); 
} 
} 
} 
(iii) One server to multiple clients (Different devices) 
Server.java 
import java.io.*; 
import java.net.*; 
public class Server { 
public static void main(String[] args) { 
try { 
ServerSocket serverSocket = new ServerSocket(5000); System.out.println("Server is waiting for clients..."); while (true) { 
Socket socket = serverSocket.accept(); 
System.out.println("Client connected."); 
new ClientHandler(socket).start(); 
} 
} catch (Exception e) { 
e.printStackTrace(); 
} 
} 
}
class ClientHandler extends Thread { 
private Socket socket; 
public ClientHandler(Socket socket) { 
this.socket = socket; 
} 
public void run() { 
try { 
BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream())); PrintWriter output = new PrintWriter(socket.getOutputStream(), true); 
String message = input.readLine(); 
System.out.println("Client: " + message); 
output.println("Hello from Server"); 
socket.close(); 
} catch (Exception e) { 
e.printStackTrace(); 
} 
} 
} 
Client.java 
import java.io.*; 
import java.net.*; 
public class Client { 
public static void main(String[] args) { 
try { 
Socket socket = new Socket("192.168.1.5", 5000);
BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream())); PrintWriter output = new PrintWriter(socket.getOutputStream(), true); 
output.println("Hello from Client"); 
String message = input.readLine(); 
System.out.println("Server: " + message); 
socket.close(); 
} catch (Exception e) { 
e.printStackTrace(); 
} 
} 
} 
EXP 2: 
(i) RPC-based Calculator in Java (with User Input) 
Server.java 
import java.io.*; 
import java.net.*; 
public class Server { 
public static void main(String[] args) throws Exception { 
ServerSocket ss = new ServerSocket(5000); 
Socket s = ss.accept(); 
BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream())); PrintWriter out = new PrintWriter(s.getOutputStream(), true); 
String[] data = in.readLine().split(" "); 
int a = Integer.parseInt(data[0]), b = Integer.parseInt(data[1]); 
switch (data[2]) { 
case "+": out.println(a + b); break; 
case "-": out.println(a - b); break;
case "*": out.println(a * b); break; 
case "/": out.println(b != 0 ? a / b : "Error"); break; 
default: out.println("Invalid Operator"); 
} 
s.close(); ss.close(); 
} 
} 
Client.java 
import java.io.*; 
import java.net.*; 
public class Client { 
public static void main(String[] args) throws Exception { 
Socket s = new Socket("localhost", 5000); 
BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream())); PrintWriter out = new PrintWriter(s.getOutputStream(), true); 
BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in)); 
System.out.print("Enter first number: "); 
int a = Integer.parseInt(userInput.readLine()); 
System.out.print("Enter second number: "); 
int b = Integer.parseInt(userInput.readLine()); 
System.out.print("Enter operator (+, -, *, /): "); 
String op = userInput.readLine(); 
out.println(a + " " + b + " " + op); 
System.out.println("Result: " + in.readLine()); 
s.close(); 
} 
}
(ii) RMI-based Calculator in Java (with User Input) 
ICalculator.java
import java.rmi.Remote;
import java.rmi.RemoteException;


public interface ICalculator extends Remote {
    int add(int a, int b) throws RemoteException;
    int subtract(int a, int b) throws RemoteException;
    int multiply(int a, int b) throws RemoteException;
    int divide(int a, int b) throws RemoteException;
}
Calculator.java
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;


public class Calculator extends UnicastRemoteObject implements ICalculator {
    protected Calculator() throws RemoteException {
        super();
    }


    @Override
    public int add(int a, int b) throws RemoteException {
        return a + b;
    }


    @Override
    public int subtract(int a, int b) throws RemoteException {
        return a - b;
    }


    @Override
    public int multiply(int a, int b) throws RemoteException {
        return a * b;
    }


    @Override
    public int divide(int a, int b) throws RemoteException {
        if (b == 0) throw new ArithmeticException("Division by zero!");
        return a / b;
    }
}
CalculatorServer.java
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.Naming;


public class CalculatorServer {
    public static void main(String[] args) {
        try {
            Calculator calculator = new Calculator();


            Registry registry = LocateRegistry.createRegistry(1099);


            Naming.rebind("CalculatorService", calculator);


            System.out.println("Calculator Server is ready.");
        } catch (Exception e) {
            System.err.println("Server exception: " + e.toString());
            e.printStackTrace();
        }
    }
}
CalculatorClient.java
import java.rmi.Naming;


public class CalculatorClient {
    public static void main(String[] args) {
        try {
            String serverHostname = args.length > 0 ? args[0] : "localhost";


            ICalculator calculator = (ICalculator) Naming.lookup("rmi://" + serverHostname + "/CalculatorService");


            System.out.println("Addition: " + calculator.add(10, 5));
            System.out.println("Subtraction: " + calculator.subtract(10, 5));
            System.out.println("Multiplication: " + calculator.multiply(10, 5));
            System.out.println("Division: " + calculator.divide(10, 5));
        } catch (Exception e) {
            System.err.println("Client exception: " + e.toString());
            e.printStackTrace();
        }
    }
}
EXP 3: CORBA
1. Hello.idl 
interface Hello { 
string sayHello(); 
}; 
2. Generate Stubs 
idlj -fall Hello.idl 
3. HelloImpl.java 
import HelloApp.*; 
import org.omg.CORBA.*; 
import org.omg.PortableServer.*; 
public class HelloImpl extends HelloPOA { 
public String sayHello() { 
return "Hello from Server!"; 
} 
} 
4. Server.java 
import HelloApp.*; 
import org.omg.CORBA.*; 
import org.omg.PortableServer.*; 
public class Server { 
public static void main(String[] args) throws Exception { 
ORB orb = ORB.init(args, null); 
POA rootPOA = POAHelper.narrow(orb.resolve_initial_references("RootPOA")); HelloImpl hello = new HelloImpl(); 
rootPOA.activate_object(hello); 
System.out.println("Server is running...");
orb.run(); 
} 
} 
5. Client.java 
import HelloApp.*; 
import org.omg.CORBA.*; 
public class Client { 
public static void main(String[] args) throws Exception { ORB orb = ORB.init(args, null); 
org.omg.CORBA.Object obj = orb.string_to_object("IOR:..."); Hello hello = HelloHelper.narrow(obj); 
System.out.println(hello.sayHello()); 
} 
} 
EXP 4: 
1. Server.java 
import java.io.*; 
import java.net.*; 
import java.util.*; 
public class Server { 
static Set<PrintWriter> clients = new HashSet<>(); 
public static void main(String[] args) throws Exception { Scanner sc = new Scanner(System.in); 
System.out.print("Enter number of clients: "); 
int numClients = sc.nextInt(); 
ServerSocket ss = new ServerSocket(5000);
System.out.println("Server started..."); 
while (clients.size() < numClients) { 
Socket s = ss.accept(); 
PrintWriter out = new PrintWriter(s.getOutputStream(), true); 
clients.add(out); 
new Thread(() -> { 
try (BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()))) { String msg; 
while ((msg = in.readLine()) != null) 
for (PrintWriter client : clients) client.println(msg); 
} catch (Exception e) { clients.remove(out); } 
}).start(); 
System.out.println("Client connected. Total clients: " + clients.size()); 
} 
System.out.println("All clients connected. Chat started..."); 
} 
} 
2. Client.java 
import java.io.*; 
import java.net.*; 
public class Client { 
public static void main(String[] args) throws Exception { 
Socket s = new Socket("localhost", 5000); 
BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream())); PrintWriter out = new PrintWriter(s.getOutputStream(), true); 
BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in));
System.out.print("Enter your name: "); 
String name = userInput.readLine(); 
out.println(name + " joined the chat"); 
new Thread(() -> { 
try { String msg; while ((msg = in.readLine()) != null) System.out.println(msg); } catch (Exception e) {} }).start(); 
String msg; 
while ((msg = userInput.readLine()) != null) out.println(name + ": " + msg); 
s.close(); 
} 
} 
EXP 5: 
LamportAlgorithm.java 
import java.util.*; 
public class LamportAlgorithm { 
static int clock = 0; 
static void sendEvent(String msg) { 
clock++; 
System.out.println("Send: " + msg + " | Clock: " + clock); 
} 
static void receiveEvent(String msg, int senderClock) { 
clock = Math.max(clock, senderClock) + 1;
System.out.println("Receive: " + msg + " | Clock: " + clock); } 
public static void main(String[] args) { 
Scanner sc = new Scanner(System.in); 
System.out.print("Enter number of events: "); 
int n = sc.nextInt(); 
sc.nextLine(); 
for (int i = 0; i < n; i++) { 
System.out.print("Enter event type (send/receive): "); String type = sc.nextLine(); 
if (type.equalsIgnoreCase("send")) { 
System.out.print("Enter message: "); 
String msg = sc.nextLine(); 
sendEvent(msg); 
} else if (type.equalsIgnoreCase("receive")) { 
System.out.print("Enter message: "); 
String msg = sc.nextLine(); 
System.out.print("Enter sender's clock: "); 
int senderClock = sc.nextInt(); 
sc.nextLine(); 
receiveEvent(msg, senderClock); 
} 
} 
} 
}
EXP 6: 
RingAlgorithm.java 
import java.util.*; 
public class RingAlgorithm { 
static int[] nodes; 
static boolean[] active; 
static void startElection(int initiator) { 
System.out.println("Node " + nodes[initiator] + " started election"); 
int current = initiator; 
int leader = nodes[initiator]; 
do { 
current = (current + 1) % nodes.length; 
if (active[current]) { 
System.out.println("Message passed from " + nodes[initiator] + " to " + nodes[current]); if (nodes[current] > leader) leader = nodes[current]; 
} 
} while (current != initiator); 
System.out.println("Leader elected: " + leader); 
} 
public static void main(String[] args) { 
Scanner sc = new Scanner(System.in); 
System.out.print("Enter number of nodes: "); 
int n = sc.nextInt(); 
nodes = new int[n]; 
active = new boolean[n]; 
System.out.print("Enter node IDs: "); 
for (int i = 0; i < n; i++) { 
nodes[i] = sc.nextInt(); 
active[i] = true;
} 
System.out.print("Enter initiator node index (0 to " + (n - 1) + "): "); int initiator = sc.nextInt(); 
startElection(initiator); 
} 
} 
EXP 7: 
import java.util.*; 
public class RicartAgrawala { 
static int clock = 0; 
static void requestCS(int id) { 
clock++; 
System.out.println("Process " + id + " requesting CS at clock " + clock); } 
static void receiveRequest(int id, int senderClock) { 
clock = Math.max(clock, senderClock) + 1; 
System.out.println("Process " + id + " received request at clock " + clock); } 
static void releaseCS(int id) { 
clock++; 
System.out.println("Process " + id + " released CS at clock " + clock); } 
public static void main(String[] args) { 
Scanner sc = new Scanner(System.in); 
System.out.print("Enter process ID: "); 
int id = sc.nextInt(); 
requestCS(id); 
System.out.print("Enter sender's clock: ");
int senderClock = sc.nextInt(); 
receiveRequest(id, senderClock); 
releaseCS(id); 
} 
} 
EXP 8: 
LoadBalancing.java 
import java.util.*; 
public class LoadBalancing { 
static List<String> servers = new ArrayList<>(); 
static void addServer(String s) { 
servers.add(s); 
System.out.println("Server added: " + s); 
} 
static void removeServer(String s) { 
if (servers.remove(s)) System.out.println("Server removed: " + s); else System.out.println("Server not found"); 
} 
static void showServers() { 
System.out.println("Active servers: " + servers); 
} 
public static void main(String[] args) { 
Scanner sc = new Scanner(System.in); 
while (true) { 
System.out.print("1-Add Server 2-Remove Server 3-Show Servers 4-Exit: "); int ch = sc.nextInt(); 
sc.nextLine(); 
if (ch == 1) {
System.out.print("Enter server name: "); addServer(sc.nextLine()); 
} else if (ch == 2) { 
System.out.print("Enter server name: "); removeServer(sc.nextLine()); 
} else if (ch == 3) showServers(); 
else break; 
} 
} 
}

EXP 9:
DSMserver.java
import java.io.*;
import java.net.*;

public class DSMserver{
    public static int sharedVariable = 50;

    public static void main(String args[]){
        try{
            ServerSocket ss = new ServerSocket(5000);
            System.out.println("Server is listening on port 5000");

            while(true){
                Socket clientSocket = ss.accept();
                new ClientHandler(clientSocket).start();
            }

        }catch(IOException e){
            e.printStackTrace();
        }
    }

    private static class ClientHandler extends Thread{
        private final Socket socket;

        public ClientHandler(Socket socket){
            this.socket = socket;
        }

        @Override
        public void run(){
            try{
                BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                PrintWriter out = new PrintWriter(socket.getOutputStream(),true);

                out.println("Connected DSM, type 'exit' to quit");
                String command;

                while((command = in.readLine()) != null){
                    System.out.println("DEBUG :" + command);

                    if(command.equalsIgnoreCase("get")){
                        out.println("Accessed shared variable :"+sharedVariable);
                    }else if(command.equalsIgnoreCase("set")){
                        try{
                            int newValue = Integer.parseInt(in.readLine());
                            sharedVariable = newValue;
                            out.println("Updated shared variable :"+sharedVariable);
                        }catch(NumberFormatException e){
                            out.println("Please enter a valid value !");
                        }
                    }else if(command.equalsIgnoreCase("exit")){
                        out.println("Disconnecting DSM...");
                        break;
                    }else{
                        out.println("Invalid command !");
                    }
                }
            }catch(IOException e){
                e.printStackTrace();
            }
        }
    }
} 
DSMclient.java
import java.io.*;
import java.net.*;

public class DSMclient{
    public static void main(String args[]){
        try{
            Socket socket = new Socket("localhost",5000);

            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter out = new PrintWriter(socket.getOutputStream(),true);
            BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in));

            System.out.println(in.readLine());

            String command;
            while(true){
                System.out.print("Enter command --> get / set / exit :");
                command = userInput.readLine();
                out.println(command);

                if(command.equalsIgnoreCase("set")){
                    System.out.print("Enter the new value :");
                    out.println(userInput.readLine());
                }

                String response = in.readLine();
                System.out.println(response);

                if(command.equalsIgnoreCase("exit")){
                    break;
                }
            }

        }catch(Exception e){
            e.printStackTrace();
        }
    }
}



idlj -fall Hello idl

javac

tnameserv -ORBIntialPort 1050
java HelloServer -ORBInitialPort 1050 -ORBInitialHost localhost

